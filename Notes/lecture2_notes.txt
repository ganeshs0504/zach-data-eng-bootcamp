Vocab: Idempotent - Denoting an element of a set which is unchanged in value when operated upon.
In terms of data: An operation that produces the same result each time it is performed

In terms of data engineering: Idempotent pipelines
The pipeline produces the same results regardless of when its ran. This includes the day, time or the hour of when the pipeline is run.

Troubleshooting non-idempotent pipelines are harder to troubleshoot as they are silent failures. Some data might have discrepencies and the data might not match to the truth source. This can also cause cascading problems as well (Downstreaming data sources)

Things that will make the pipeline non-idempotent
 - INSERT INTO without TRUNCATE (try to use merge or INSERT OVERWRITE everytime) [add coding example for both merge and insert overwrite]
 - Using start_data > without a corresponding end_date <
    - why? For example if the startdate is yesterday, for each consecutive day this query returns one additional data.
 - Not using a full set of partition sensors
    - It runs with only partial inputs.
 - Not using depends_on_past for cumulative pipelines
    - Enable sequential processing for cumulative pipeline. Cumulative pieline is where we perform full outer join on previous and current data.
 - Relying on the latest partition of a not properly modeled SCD table
    - Make sure the dependency table is also following idempotent pipeline and modelled properly for SCD. The only exception for this is in backfills.


Slowly Changing Dimensions (SCD)
Attributes that might change over time. Eg age as a dimension

There are three types of SCD modeling

Type 1: It is where you only care about the latest value in the data. Its not ercommended to be used as using this will make the pipeline non-idempotent.

Type 2 (Gold standard for SCD): This is where you care about the start_date and end_date. The end_date can be extremely into the future or can be null. Eg: favorite food from 2000 - 2010 might be one and 2011 to 2020 might be another. This is hte only type of SCD that is purely idempotent.

Type 3: You only hold on to two values. Orignal value and the current value. Even if your dimension changes more than once, you loose track of intermediarry changes and also wont track when such changes occur.

Note: Only type 0 (Unchanging dimension) and type 2 are idempotent.

SCD type 2:
There are two ways to load the tables
    - One giant query (ineffecient but nimble)
    - Cumulative way (effecient but cumbersome)

